# Tencent is pleased to support the open source community by making Polaris available.
#
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
#
# Licensed under the BSD 3-Clause License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://opensource.org/licenses/BSD-3-Clause
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

name: IntegrationTest(MySQL + Redis)

on:
  push:
    branches:
      - main
      - release*
  pull_request:
    branches:
      - main
      - release*

permissions:
  contents: write

# Always force the use of Go modules
env:
  GO111MODULE: on

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        goarch: [ amd64 ]
        goos: [ linux ]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            vert: 1
        exclude:
          - os: ubuntu-latest
            goos: windows
          - os: ubuntu-latest
            goos: darwin
          - os: windows-latest
            goos: linux
          - os: windows-latest
            goos: darwin
          - os: macos-latest
            goos: windows
          - os: macos-latest
            goos: linux

    runs-on: ${{ matrix.os }}
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    steps:
      # Setup the environment.
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.5"
      # Checkout latest code
      - name: Checkout repo
        uses: actions/checkout@v2

      # Compile
      - name: Build server
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: make build

      - name: Initialize database
        env:
          MYSQL_DB_USER: root
          MYSQL_DB_PWD: root
          MYSQL_DATABASE: polaris_server
        run: |
          sudo systemctl start mysql.service
          mysql -e 'CREATE DATABASE ${{ env.MYSQL_DATABASE }};' -u${{ env.MYSQL_DB_USER }} -p${{ env.MYSQL_DB_PWD }}
          mysql -e "ALTER USER '${{ env.MYSQL_DB_USER }}'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';"  -u${{ env.MYSQL_DB_USER }} -p${{ env.MYSQL_DB_PWD }}

      # Run interface tests
      - name: run discover interface tests
        env:
          MYSQL_DB_USER: root
          MYSQL_DB_PWD: root
          REDIS_ADDR: 127.0.0.1:6379
          REDIS_PWD: 
        run: |
          export STORE_MODE=sqldb
          export MYSQL_DB_USER=${{ env.MYSQL_DB_USER }}
          export MYSQL_DB_PWD=${{ env.MYSQL_DB_PWD }}
          echo "cur STORE MODE=${STORE_MODE}, MYSQL_DB_USER=${MYSQL_DB_USER}, MYSQL_DB_PWD=${MYSQL_DB_PWD}"
          # 设置严格模式
          mysql -h127.0.0.1 -P3306 -u${{ env.MYSQL_DB_USER }} -p"${{ env.MYSQL_DB_PWD }}" -e "set sql_mode='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION'";
          # 清空数据
          mysql -h127.0.0.1 -P3306 -u${{ env.MYSQL_DB_USER }} -p"${{ env.MYSQL_DB_PWD }}" -e "DROP DATABASE IF EXISTS polaris_server";
          # 初始化 polaris 数据库
          mysql -h127.0.0.1 -P3306 -u${{ env.MYSQL_DB_USER }} -p"${{ env.MYSQL_DB_PWD }}" < store/mysql/scripts/polaris_server.sql
          # 临时放开 DB 的最大连接数
          mysql -h127.0.0.1 -P3306 -u${{ env.MYSQL_DB_USER }} -p"${{ env.MYSQL_DB_PWD }}" -e "set GLOBAL max_connections = 3000;"

          work_dir=$(ls | grep sergo-server-release | sed -n '1p')
          echo "work_dir is $work_dir"

          cp -rf ./test/data/sergo-server.yaml $work_dir/

          cd $work_dir

          ls -alR

          if [[ "$(uname)" == "Darwin" ]]; then
              # Mac OS X 操作系统
              echo "Run on MacOS"
              # sed -i '' 's/consoleOpen: true/consoleOpen: false/g' conf/sergo-server.yaml
          else
              # GNU/Linux操作系统
              echo "Run on Linux"
              # sed -i 's/consoleOpen: \(true\|false\)/consoleOpen: false/g' conf/sergo-server.yaml
          fi

          chmod +x ./tool/*.sh
          ./tool/start.sh

          sleep 120s
          ls -alR
          cd ..
          ls -lstrh
          # 先测试普通的集成测试
          pushd ./test/integrate
          echo "[INTEGRATION TEST] begin"
          curl http://127.0.0.1:8090
          go test -count=1 -v -tags integration -timeout 60m
          echo "[INTEGRATION TEST] end"
          popd
          cd $work_dir
          ./tool/stop.sh
          cd ..
